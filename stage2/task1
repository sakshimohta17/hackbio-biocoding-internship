#https://github.com/sakshimohta17/hackbio-biocoding-internship/blob/main/stage2/task1
#www.linkedin.com/in/sakshimohta1705

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import ttest_ind
import urllib.request
import io

# Load dataset
url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/mcgc.tsv"
response = urllib.request.urlopen(url)
df = pd.read_csv(io.StringIO(response.read().decode('utf-8')), sep='\t')

# Function to determine time to reach carrying capacity
def carrying_capacity_time(df, strain, strain_type):
    strain_data = df[(df['Strain'] == strain) & (df['Type'] == strain_type)]
    carrying_capacity = strain_data['OD600'].max()
    time_to_capacity = strain_data[strain_data['OD600'] >= 0.95 * carrying_capacity]['Time'].min()
    return time_to_capacity

# Get unique strains
time_to_capacity = []
strains = df['Strain'].unique()

# Plot growth curves
for strain in strains:
    plt.figure(figsize=(8, 5))
    for strain_type in ['-', '+']:
        subset = df[(df['Strain'] == strain) & (df['Type'] == strain_type)]
        if not subset.empty:
            plt.plot(subset['Time'], subset['OD600'], label=f"{strain_type} strain")
    plt.xlabel('Time (hours)')
    plt.ylabel('OD600')
    plt.title(f'Growth Curve for {strain}')
    plt.legend()
    plt.show()
    
    # Store time to carrying capacity
    for strain_type in ['-', '+']:
        if not df[(df['Strain'] == strain) & (df['Type'] == strain_type)].empty:
            time_to_capacity.append([strain, carrying_capacity_time(df, strain, strain_type), strain_type])

# Convert time-to-capacity data into a DataFrame
time_df = pd.DataFrame(time_to_capacity, columns=['Strain', 'Time_to_Capacity', 'Type'])

# Scatter plot of carrying capacity times
plt.figure(figsize=(8, 5))
sns.scatterplot(data=time_df, x='Type', y='Time_to_Capacity', hue='Strain')
plt.xlabel("Strain Type")
plt.ylabel("Time to Carrying Capacity (hours)")
plt.title("Scatter Plot of Carrying Capacity Time")
plt.legend()
plt.show()

# Box plot of carrying capacity times
plt.figure(figsize=(8, 5))
sns.boxplot(data=time_df, x='Type', y='Time_to_Capacity')
plt.xlabel("Strain Type")
plt.ylabel("Time to Carrying Capacity (hours)")
plt.title("Box Plot of Carrying Capacity Time")
plt.show()

# Statistical analysis
knockout_times = time_df[time_df['Type'] == '-']['Time_to_Capacity']
knockin_times = time_df[time_df['Type'] == '+']['Time_to_Capacity']

stat, p_value = ttest_ind(knockout_times, knockin_times, equal_var=False, nan_policy='omit')
print(f"T-test p-value: {p_value}")

# Interpretation of statistical results
if p_value < 0.05:
    print("There is a significant difference in the time to carrying capacity between knock-out and knock-in strains.")
else:
    print("No significant difference found between knock-out and knock-in strains.")

# Observations:
# - If knock-out strains take significantly longer to reach carrying capacity, it may suggest impaired growth.
# - If knock-in strains reach carrying capacity faster, it may indicate a growth advantage.
# - The boxplot and scatter plot provide a visual representation of these differences.
