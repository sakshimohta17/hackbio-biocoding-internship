import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind

# Dataset URL (TSV format)
dataset_url = "https://raw.githubusercontent.com/HackBio-Internship/2025_project_collection/refs/heads/main/Python/Dataset/mcgc.tsv"

# Load dataset with tab separator
try:
    df = pd.read_csv(dataset_url, sep="\t", encoding="utf-8")
    print("Dataset loaded successfully.\n")
except Exception as e:
    print("Error loading dataset:", e)
    exit()

# Display first few rows to check structure
print(df.head())

# Extract correct column names from the dataset
print("\nDataset Columns:", df.columns)

# Update column names based on metadata
strain_column = "Strain"      # Update if different
time_column = "Time"          # Update if different
od_column = "OD600"           # Update if different

# Ensure correct column names exist
if not all(col in df.columns for col in [strain_column, time_column, od_column]):
    print("Error: Column names do not match metadata. Check column names and update.")
    exit()

# Convert time column to numeric if needed
df[time_column] = pd.to_numeric(df[time_column], errors="coerce")

# Remove any rows with missing values
df.dropna(subset=[strain_column, time_column, od_column], inplace=True)

# Function to determine time to carrying capacity
def time_to_carrying_capacity(df, strain_column, time_column, od_column):
    carrying_capacity_times = {}

    for strain in df[strain_column].unique():
        strain_data = df[df[strain_column] == strain]

        # Find the time point where OD600 reaches its maximum
        max_od = strain_data[od_column].max()
        carrying_capacity_time = strain_data[time_column][strain_data[od_column] == max_od].values[0]
        
        carrying_capacity_times[strain] = carrying_capacity_time

    return carrying_capacity_times

# Get carrying capacity times
carrying_capacity_times = time_to_carrying_capacity(df, strain_column, time_column, od_column)

# Convert to DataFrame
carrying_capacity_df = pd.DataFrame(list(carrying_capacity_times.items()), columns=["Strain", "CarryingCapacityTime"])

# Identify Knock-in (+) and Knock-out (-) strains using metadata
carrying_capacity_df["Type"] = carrying_capacity_df["Strain"].apply(lambda x: "Knock-out" if "-" in x else "Knock-in")

# Plot Growth Curves for Each Strain
plt.figure(figsize=(10, 6))
for strain in df[strain_column].unique():
    strain_data = df[df[strain_column] == strain]
    label = "Kno
